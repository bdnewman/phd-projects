//Magma Program:  Determining Growth of Torsion in Quadratic Extensions



//Inputs: a non-square integer d (-1 or -3) and an elliptic curve over Q(\sqrt{d})
//Output:  List of quadratic extensions where torsion grows and the torsion structures over those fields

d := -3;
K<a>:= QuadraticField(d);
"K:",K;
R<x> := PolynomialRing(K);
E := EllipticCurve(  x*(x+1)*(x+4));
"E:",E;
I := Integers(); 
/////////////////////////////// Defining Function
//Gives integer square-free part of rational number

squarefree := function(D)
ND := I ! Numerator(D);
DD := I ! Denominator(D);
SFN := SquarefreeFactorization(ND);
SFD:= SquarefreeFactorization(DD);
output := SFD*SFN;  // numerator, denominator relatively prime
return output;
end function;
///////////////////////////////////


///////////////////////////////////////////////////  Defining another function
// Given element of quadratic field this function gives a rational number 
//congruent to it modulo squares (if such a number exists) the element of the quadratic field should be of the form f=u+v*a

RationalModSquares := function(f)  
//f is of the form v+w*a for rationals v,w;
f := K!f;
m :=f[1];
n:= f[2];

R<x> := PolynomialRing(Rationals()); 

if (m eq 0) and (n ne 0) then           
    if d eq -1 then                     
        output := n*2;  
    else
        output := f;
        end if;
elif (m ne 0) and (n ne 0) then
    pol := x^2-(2*m/n)*x+ d;
    roots := Roots(pol);
    
    if #roots ge 1 then //f is congruent to a square!
        c := roots[1][1]; 
        output := ((c+a)^2)/f;
    else
        output := f;//f is not congruent to a square
		end if;

else  // f is rational
    output := f;
    end if;

return output;
end function;
//////////////////////////////////////


//First we list the primes which occur as the order of points in E(K)_{tor} (over the BASE FIELD k)

primes := [2,3,5,7];

//Now we will collect the relevant division polynomials to detect growth.  
//We will grab one division polynomial f_p for each prime p in primes.

T:=TorsionSubgroup(E);
two_invariants := pPrimaryInvariants(T, 2);
invariants := Invariants(T);
"Torsion over base field K:";
invariants;

count_summands := [0,0,0,0];
for n in [1..#primes] do
    for i in [1..#invariants] do
        rem := invariants[i] mod primes[n];
        if rem eq 0 then
            count_summands[n] := count_summands[n]+1;
            end if;
        end for;
    end for;

two_length := #two_invariants;


/// chose last entry x so that Magma would accept polynomial entries in this list
DivPols := [0,0,0,0,0,x]; 

//Defining division polynomial for p=2
if two_length ne 0 then
    twodivpol := DivisionPolynomial(E,2*(two_invariants[two_length]) );
    DivPols[1] := twodivpol;
    end if;
    
//Defining division polynomials for odd primes

for n in [2..#primes] do  
    if count_summands[n] lt 2 then
        DivPols[n] :=DivisionPolynomial(E,primes[n]);
        end if;
    end for;

//////////////  Now for each p, we will study the roots of the associated division
//polynomial to determine where the p-part of the torsion grows.

for n in [1..#primes] do

    if DivPols[n] ne 0 then

        Fac := Factorization(DivPols[n]);
        size := #Fac;

// Now I'm going to run through each factor of the division polynomial. For each factor, I first check its degree and then do something depending on its degree.  
//If the degree is 1 then the factor is linear.  I grab the root b of the linear factor and ask magma if there is a point on E defined over K with x-coord b.  If not, I define a quadratic extension L where there is a point with x-coord b.  I then compute the torsion over L (as I now know it will grow in L).  
//If the degree is 2, I build the quadratic extension L of K where the roots lie (call one such root e), and then ask Magma if there is a point on E defined over L with x-coord e.  If so, I compute the torsion over L (as I now know it will grow in L).

        for s in [1..size] do

///////////////////////////////////////////////////////////////////////  Degree 1 Case

            if Degree(Fac[s][1]) eq 1 then

                pol := Fac[s][1];
                root := Roots(pol);
                a := root[1]; 
                b := a[1];  //root of linear factor of division polynomial
                P := Points(E,b);   // The function Points only detects the y-values defined over the SAME base field (as E)

//////////////////////////////////// 
                if #P eq 0 then
                    ai := aInvariants(E) ;
                    R<y> := PolynomialRing(K);
                    f := y^2 + ai[1]*b*y + ai[3]*y - (b^3 + ai[2]*b^2+ai[4]*b+ai[5]);
                    L<e> := ext<K | f>;
                    Disc := Discriminant(f);
                    RR := RationalModSquares(Disc);
                    if RR[2] eq 0 then
                        dd := squarefree(RR);  // my user-defined function
                    else
                        dd := RR;
                        end if;
                   "Torsion grows in L=K(\sqrt{d}) where d =",dd;

                    EL := BaseExtend(E,L);
                    T := TorsionSubgroup(EL);
                    "The invariants of E(L)_{tor} are:";
                    Invariants(T);
                    end if;
                end if;

//////////////////////////////////////////////////////////////////////////Degree 2 case

            if Degree(Fac[s][1]) eq 2 then

/////////////////////////////////////

                R<y> := PolynomialRing(K);
                f := Fac[s][1];                 
                L<e> := ext<K | f>;
                EL := BaseExtend(E,L);
                P :=  Points(EL, e) ;

                if #P gt 0 then

                    Disc := Discriminant(f);
                    RR := RationalModSquares(Disc);
                    if RR[2] eq 0 then
                        dd := squarefree(RR);  // my user-defined functions
                    else
                        dd := RR;
                        end if;
                    "Torsion grows in K(\sqrt{d}) where d =",dd;
                    EL := BaseExtend(E,L);
                    T := TorsionSubgroup(EL);
                    "The invariants of E(L)_{tor} are:";
                    Invariants(T);
                    end  if;
                end if;
            end for;
        end if;
    end for;

